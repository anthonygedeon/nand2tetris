// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// Gates that are used only: Or16 And16 Not16 Mux16, Add16
	
	// set x = 0
	Mux16(a=x, b=false, sel=zx, out=zeroX);

	// set x = !x i.e x == 1001 then !x = 0110
	Not16(in=zeroX, out=notX);
	Mux16(a=zeroX, b=notX, sel=nx, out=negateX);

	// set y = 0
	Mux16(a=y, b=false, sel=zy, out=zeroY);

	// set y = !x i.e y == 1001 then !y = 0110
	Not16(in=zeroY, out=notY);
	Mux16(a=zeroY, b=notY, sel=ny, out=negateY);

	// if (f == 1)  set out = x + y  // integer 2's complement addition
	Add16(a=negateX, b=negateY, out=AddXY);

	// if (f == 0)  set out = x & y  // bitwise and
	And16(a=negateX, b=negateY, out=AndXY);
	Mux16(a=AndXY, b=AddXY, sel=f, out=opResult);

	// if (no == 1) set out = !out   // bitwise not
	Not16(in=opResult, out=negateResult);
	Mux16(a=opResult, b=negateResult, sel=no, out=out, out[0..7]=nibble1, out[8..15]=nibble2, out[15]=ng);
	
	Or8Way(in=nibble1, out=n1);
	Or8Way(in=nibble2, out=n2);
	Not(in=n1, out=nn1);
	Not(in=n2, out=nn2);
	And(a=nn1, b=nn2, out=zr);
}

